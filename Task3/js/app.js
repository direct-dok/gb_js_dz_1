/*

1. Здесь работает ассоциативность операторов. Оператор сложения (плюс), выполняется слева на право, то есть, в сначала будут складываться первый и второй операнды (к первому, операнду, будет прибавляться второй), так как тип данных первых двух операндов это "number", то сложение произойдет по правилам математики и мы получим 20. Далее идет еще один оператор "+", опять выполнение слева на право и мы получаем выражение 20 + "10". Слева у нас число 20, справа строка "10", и в таком случае, по правилам js, произойдет склеивание (конкатенация) строки с числом (операнды разных типов) и в результате, мы получим не число 30 как предполагается по правилам математики, а строку "2010", тип "string". 

2. Здесь все еще проще. Оператор плюс, как я говорил, выполняется слева на право. Первый операнд у нас является числом (тип number) 10, второй операнд является сторокой (тип string) "10". При сложении числа со строкой, или строки с числом, происходит склеивание (конкатенация) строки с числом и в результате, при сложении первого операнда 10 (тип number, число), со вторым "10" (тип string, строка), мы получим в результате строку 1010. При сложении строки с числом, мало того, что они склеиваются, так операнд числового типа приводится к строковому типу, и два операнда, превращаются просто в строку. Далее уже строка "1010", получившаяся при сложении первого и второго операндов, будет складываться с третьим операндом 10 (тип number, число), а так как один из операндов при сложении является стокой, то в результате произойдет конкатенация строк и при сложении строки "1010" с числом 10, мы получаем строку "101010". 

3. В третьем примере, знак "+" (унарный плюс) перед третьим операндом, означает изменение его типа, со строки на число и в данном выражении, ожидаемо получаем число 30. Если бы третьим операндом не стоял бы знак плюс, то результат был бы как в первом примере. 

4. В этом выражении, мы видим в качестве второго операнда пустую строку с унарным минусом. Можно подумать, мы получим NaN, или произойдет какая то конкатенация. Но это не так. Дело в том, что пустая строка, в случае выполнения арифметических операций деления, вычитания, или умножения, приводится к нулю, то есть к числу и мы получаем не просто бессмысленное выражение (10 / -""), интерпретатор js, обрабатывает данное выражение как (10 / -0). Деление на ноль с точки зрения математики, бессмысленная операция и запрещена, но в js, в результате вычисления такого выражения, мы получаем -Infinity (минус бесконечность). Если бы это был просто ноль, без знака минус, то мы бы получили просто Infinity, бесконечность. То есть приходим к выводу, что в данном выражении, пустая строка "", была приведена к нулю, то есть к -0, в результате при делении на ноль, мы получили -Infinity.

5. В данном выражении, мы видим, что есть два операнда, первый число 10, второй строка "2,5". В целом, если бы строка "2,5", была бы написана с точкой, а не с запятой, то унарный плюс, привел бы строку "2.5", к числу 2.5 и результатом выражения, было бы число "4". В нашем случае, унарный плюс приводит строку "2,5" к типу "NaN", не число. Унарный плюс, должен был привести строку к числу, но так как в строке есть запятая (иной символ кроме числа и точки. К числу будет приведено, даже если в конце строки будет точка), которая не позволяет привести строку к числовому типу, то унарный плюс, не может привести строку "2,5" к числу, и получаем не число, тип "NaN". Результатом выражения (10 / NaN) ожидаемо будет "NaN", так как ничего другого мы не получим, при делении числа на "NaN".

*/

const result1 = 10 + 10 + "10"; // 1
const result2 = 10 + "10" + 10; // 2
const result3 = 10 + 10 + +"10"; // 3
const result4 = 10 / -""; // 4
const result5 = 10 / +"2,5"; // 5

console.log(result1); 
